# BASE CONFIG

indexer {
    mem_limit = 512M
}

source base {
    type = pgsql
    sql_host = podverse_db
    sql_user = postgres
    sql_pass = mysecretpw
    sql_db = postgres
    sql_ranged_throttle = 50
}

# AUTHOR NAME SEARCH

source author_base: base {
    sql_field_string = name
    sql_attr_string = podverse_id
}

source author: author_base {
    sql_query = \
        SELECT \
            int_id, \
            id AS podverse_id, \
            name \
        FROM authors
}

index idx_author {
    source = author
    path = author_name
    dict = keywords
    expand_keywords = 1
    min_infix_len = 2
    charset_table = non_cjk, cjk
    rt_mem_limit = 4G
}

# EPISODE TITLE SEARCH

source episode_base: base {
    sql_field_string = title
    sql_attr_string = podverse_id
    sql_attr_uint = pastDayTotalUniquePageviews
    sql_attr_uint = pastWeekTotalUniquePageviews
    sql_attr_uint = pastMonthTotalUniquePageviews
    sql_attr_uint = pastYearTotalUniquePageviews
    sql_attr_uint = pastAllTimeTotalUniquePageviews
    sql_attr_timestamp = created_date
    
    sql_range_step = 10000
    sql_query = \
        SELECT \
            e.int_id, \
            e.id AS podverse_id, \
            REPLACE(e.title, ' ', '') as title, \
            sed.play_count AS "pastDayTotalUniquePageviews", \
            sew.play_count AS "pastWeekTotalUniquePageviews", \
            sem.play_count AS "pastMonthTotalUniquePageviews", \
            sey.play_count AS "pastYearTotalUniquePageviews", \
            seall.play_count AS "pastAllTimeTotalUniquePageviews", \
            extract(epoch from e."pubDate") AS created_date \
        FROM episodes e \
        LEFT JOIN stats_episode sed ON e.id = sed.episode_id AND sed.timeframe = 'daily' \
        LEFT JOIN stats_episode sew ON e.id = sew.episode_id AND sew.timeframe = 'weekly' \
        LEFT JOIN stats_episode sem ON e.id = sem.episode_id AND sem.timeframe = 'monthly' \
        LEFT JOIN stats_episode sey ON e.id = sey.episode_id AND sey.timeframe = 'yearly' \
        LEFT JOIN stats_episode seall ON e.id = seall.episode_id AND seall.timeframe = 'all_time' \
        WHERE e.int_id >= $start AND e.int_id <= $end AND e."isPublic" = true AND e.title <> ''
}

source episode_01: episode_base {
    sql_query_range = SELECT MIN(int_id), MAX(int_id) FROM episodes WHERE int_id >= 1 AND int_id < 20000001
}

source episode_02: episode_base {
    sql_query_range = SELECT MIN(int_id), MAX(int_id) FROM episodes WHERE int_id >= 20000001 AND int_id < 40000001
}

source episode_03: episode_base {
    sql_query_range = SELECT MIN(int_id), MAX(int_id) FROM episodes WHERE int_id >= 40000001 AND int_id < 60000001
}

source episode_04: episode_base {
    sql_query_range = SELECT MIN(int_id), MAX(int_id) FROM episodes WHERE int_id >= 60000001 AND int_id < 80000001
}

source episode_05: episode_base {
    sql_query_range = SELECT MIN(int_id), MAX(int_id) FROM episodes WHERE int_id >= 80000001 AND int_id < 100000001
}

source episode_06: episode_base {
    sql_query_range = SELECT MIN(int_id), MAX(int_id) FROM episodes WHERE int_id >= 100000001 AND int_id < 120000001
}

source episode_07: episode_base {
    sql_query_range = SELECT MIN(int_id), MAX(int_id) FROM episodes WHERE int_id >= 120000001 AND int_id < 140000001
}

source episode_08: episode_base {
    sql_query_range = SELECT MIN(int_id), MAX(int_id) FROM episodes WHERE int_id >= 140000001 AND int_id < 160000001
}

source episode_09: episode_base {
    sql_query_range = SELECT MIN(int_id), MAX(int_id) FROM episodes WHERE int_id >= 160000001 AND int_id < 180000001
}

source episode_10: episode_base {
    sql_query_range = SELECT MIN(int_id), MAX(int_id) FROM episodes WHERE int_id >= 180000001 AND int_id < 200000001
}

index idx_episode_base {
    dict = keywords
    expand_keywords = 1
    min_infix_len = 2
    charset_table = non_cjk, cjk
}

index idx_episode_01: idx_episode_base {
    source = episode_01
    path = episodes_title_01
}

index idx_episode_02: idx_episode_base {
    source = episode_02
    path = episodes_title_02
}

index idx_episode_03: idx_episode_base {
    source = episode_03
    path = episodes_title_03
}

index idx_episode_04: idx_episode_base {
    source = episode_04
    path = episodes_title_04
}

index idx_episode_05: idx_episode_base {
    source = episode_05
    path = episodes_title_05
}

index idx_episode_06: idx_episode_base {
    source = episode_06
    path = episodes_title_06
}

index idx_episode_07: idx_episode_base {
    source = episode_07
    path = episodes_title_07
}

index idx_episode_08: idx_episode_base {
    source = episode_08
    path = episodes_title_08
}

index idx_episode_09: idx_episode_base {
    source = episode_09
    path = episodes_title_09
}

index idx_episode_10: idx_episode_base {
    source = episode_10
    path = episodes_title_10
}

index idx_episode_dist {
    type = distributed
    local = idx_episode_01
    local = idx_episode_02
    local = idx_episode_03
    local = idx_episode_04
    local = idx_episode_05
    local = idx_episode_06
    local = idx_episode_07
    local = idx_episode_08
    local = idx_episode_09
    local = idx_episode_10
}

# MEDIA_REF TITLE SEARCH

source media_ref_base: base {
    sql_field_string = title
    sql_attr_string = podverse_id
    sql_attr_uint = pastDayTotalUniquePageviews
    sql_attr_uint = pastWeekTotalUniquePageviews
    sql_attr_uint = pastMonthTotalUniquePageviews
    sql_attr_uint = pastYearTotalUniquePageviews
    sql_attr_uint = pastAllTimeTotalUniquePageviews
    sql_attr_timestamp = created_date
}

source media_ref: media_ref_base {
    sql_query = \
        SELECT \
            mr.int_id, \
            mr.id AS podverse_id, \
            REPLACE(mr.title, ' ', '') as title, \
            smrd.play_count AS "pastDayTotalUniquePageviews", \
            smrw.play_count AS "pastWeekTotalUniquePageviews", \
            smrm.play_count AS "pastMonthTotalUniquePageviews", \
            smry.play_count AS "pastYearTotalUniquePageviews", \
            smrall.play_count AS "pastAllTimeTotalUniquePageviews", \
            extract(epoch from mr."createdAt") AS created_date \
        FROM "mediaRefs" mr \
        LEFT JOIN episodes ON mr."episodeId" = episodes.id \
        LEFT JOIN stats_media_ref smrd ON mr.id = smrd.media_ref_id AND smrd.timeframe = 'daily' \
        LEFT JOIN stats_media_ref smrw ON mr.id = smrw.media_ref_id AND smrw.timeframe = 'weekly' \
        LEFT JOIN stats_media_ref smrm ON mr.id = smrm.media_ref_id AND smrm.timeframe = 'monthly' \
        LEFT JOIN stats_media_ref smry ON mr.id = smry.media_ref_id AND smry.timeframe = 'yearly' \
        LEFT JOIN stats_media_ref smrall ON mr.id = smrall.media_ref_id AND smrall.timeframe = 'all_time' \
        WHERE mr."isPublic" = true \
            AND mr."isOfficialChapter" IS NOT true \
            AND mr.title <> '' \
            AND "episodes"."isPublic" = true
}

index idx_media_ref {
    source = media_ref
    path = media_ref_title
    dict = keywords
    expand_keywords = 1
    min_infix_len = 2
    charset_table = non_cjk, cjk
    rt_mem_limit = 4G
}

# PLAYLIST TITLE SEARCH

source playlist_base: base {
    sql_field_string = title
    sql_attr_string = podverse_id
}

source playlist: playlist_base {
    sql_query = \
        SELECT \
            int_id, \
            id AS podverse_id, \
            REPLACE(title, ' ', '') as title \
        FROM playlists
}

index idx_playlist {
    source = playlist
    path = playlist_title
    dict = keywords
    expand_keywords = 1
    min_infix_len = 2
    charset_table = non_cjk, cjk
    rt_mem_limit = 4G
}

# PODCAST TITLE SEARCH

source podcast_base: base {
    sql_field_string = title
    sql_attr_string = podverse_id
    sql_attr_string = sortableTitle
    sql_attr_string = medium
    sql_attr_bool = hasVideo
    sql_attr_uint = pastDayTotalUniquePageviews
    sql_attr_uint = pastWeekTotalUniquePageviews
    sql_attr_uint = pastMonthTotalUniquePageviews
    sql_attr_uint = pastYearTotalUniquePageviews
    sql_attr_uint = pastAllTimeTotalUniquePageviews
    sql_attr_timestamp = created_date
}

source podcast: podcast_base {
    sql_query_range = SELECT MIN(int_id), MAX(int_id) FROM podcasts
    sql_range_step = 10000
    sql_query = \
        SELECT \
            p.int_id, \
            p.id AS podverse_id, \
            REPLACE(p.title, ' ', '') as title, \
            p."sortableTitle", \
            spd.play_count AS "pastDayTotalUniquePageviews", \
            spw.play_count AS "pastWeekTotalUniquePageviews", \
            spm.play_count AS "pastMonthTotalUniquePageviews", \
            spy.play_count AS "pastYearTotalUniquePageviews", \
            spall.play_count AS "pastAllTimeTotalUniquePageviews", \
            p."medium", \
            p."hasVideo", \
            extract(epoch from p."lastEpisodePubDate") AS created_date \
        FROM podcasts p \
        LEFT JOIN stats_podcast spd ON p.id = spd.podcast_id AND spd.timeframe = 'daily' \
        LEFT JOIN stats_podcast spw ON p.id = spw.podcast_id AND spw.timeframe = 'weekly' \
        LEFT JOIN stats_podcast spm ON p.id = spm.podcast_id AND spm.timeframe = 'monthly' \
        LEFT JOIN stats_podcast spy ON p.id = spy.podcast_id AND spy.timeframe = 'yearly' \
        LEFT JOIN stats_podcast spall ON p.id = spall.podcast_id AND spall.timeframe = 'all_time' \
        WHERE p.int_id >= $start AND p.int_id <= $end AND p."isPublic" = true AND p.title <> ''
}

index idx_podcast {
    source = podcast
    path = podcasts_title
    dict = keywords
    expand_keywords = 1
    min_infix_len = 2
    charset_table = non_cjk, cjk
    rt_mem_limit = 4G
}

# SEARCHD CONFIG

searchd {
    listen = 9306:mysql41
    listen = 9308:http
    log = searchd.log
    query_log = query.log
    binlog_path =
    network_timeout = 5
    client_timeout = 300
    # max_children = 30
    persistent_connections_limit = 30
    pid_file = manticoresearch.pid
    seamless_rotate = 1
    preopen_indexes = 1
    unlink_old = 1
    # mva_updates_pool = 1M
    max_packet_size = 8M
    max_filters = 256
    max_filter_values = 4096
    max_batch_queries = 32
    workers = threads
    collation_server = utf8_ci
}
